import streamlit as st
import pandas as pd
import tensorflow as tf
import numpy as np

# Path to the model file in the repository
MODEL_PATH = "annModel.tflite"

# Load TFLite Model
def load_tflite_model(model_path):
    interpreter = tf.lite.Interpreter(model_path=model_path)
    interpreter.allocate_tensors()
    return interpreter

# Prepare Input
def prepare_input(input_data, input_details):
    # Adjust input data shape and type as per model requirements
    input_data = np.array(input_data, dtype=input_details['dtype'])
    input_data = input_data.reshape(input_details['shape'])  # Reshape if required
    return input_data

# Run Inference
def run_inference(interpreter, input_data):
    input_details = interpreter.get_input_details()[0]
    output_details = interpreter.get_output_details()[0]

    input_data = prepare_input(input_data, input_details)
    interpreter.set_tensor(input_details['index'], input_data)

    interpreter.invoke()  # Run inference
    output_data = interpreter.get_tensor(output_details['index'])  # Get predictions
    return output_data

# Streamlit Interface
def main():
    st.title("Combined Cycle Power Plant")
    st.write("Make Predictions using : Artificial Neural Network.")
    with st.expander("About the Dataset"):
        st.write("""
        The model is trained on the dataset containing 9568 data points collected from a Combined Cycle Power Plant over 6 years (2006-2011), 
        when the power plant was set to work with full load. Features consist of hourly average ambient variables:
        - **Temperature (T)**
        - **Ambient Pressure (AP)**
        - **Relative Humidity (RH)**
        - **Exhaust Vacuum (V)**
    
        These variables are used to predict the net hourly electrical energy output (**EP**) of the plant. 
    
        **Combined Cycle Power Plant (CCPP)**:
        A CCPP is composed of gas turbines (GT), steam turbines (ST), and heat recovery steam generators. In a CCPP, electricity is generated by gas and steam turbines, 
        which are combined in one cycle and transferred from one turbine to another. 
        - The Vacuum is collected from and affects the Steam Turbine.
        - The other three ambient variables impact the GT performance.
        """)
    data = {
    "AT": [8.34, 23.64, 29.74, 19.07],
    "V": [40.77, 58.49, 56.9, 49.69],
    "AP": [1010.84, 1011.4, 1007.15, 1007.22],
    "RH": [90.01, 74.2, 41.91, 76.79],
    "PE": [480.48, 445.75, 438.76, 453.09],  # Output column
    }
    df = pd.DataFrame(data)

    # Set the title of the app
    st.title("Power Plant Data Selection")

    # Add an expander for trial data
    with st.expander("Trial Data"):
        st.write("Select a row of input data (AT, V, AP, RH):")
        st.dataframe(df[["AT", "V", "AP", "RH"]])
        
        # Dropdown to select a row by index
        selected_index = st.selectbox(
            "Select Row Index",
            options=range(len(df)),
            format_func=lambda x: f"Row {x + 1}: {df.iloc[x][['AT', 'V', 'AP', 'RH']].to_dict()}",
        )
    
        # Create a comma-separated string from the selected row
        if selected_index is not None:
            selected_data = df.iloc[selected_index][["AT", "V", "AP", "RH"]].tolist()
            dummy_data = ", ".join(map(str, selected_data))
            st.write(f"Selected Data: `{dummy_data}`")
    input_data = st.text_input("Enter input data as a comma-separated list (e.g., 28.66,   77.95, 1009.56,   69.07)")

    if input_data:
        try:
            # Load the local model
            interpreter = load_tflite_model(MODEL_PATH)

            # Parse input data
            input_data = [float(x.strip()) for x in input_data.split(",")]

            # Run prediction
            predictions = run_inference(interpreter, input_data)

            st.success(f"Net hourly electrical energy output by your power plant in MW is : {str(predictions)[2:-2]}")
        except Exception as e:
            st.error(f"Error: {e}")

if __name__ == "__main__":
    main()

